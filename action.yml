name: 'Container Build and Push'
description: 'Builds and pushes a container image to GitHub Container Registry with versioning'

inputs:
  image_name:
    description: 'Name of the container image'
    required: true
  image_title:
    description: 'Title of the container image'
    required: true
  image_description:
    description: 'Description of the container image'
    required: true
  registry:
    description: 'Container registry to push to'
    required: false
    default: 'ghcr.io'
  org_name:
    description: 'Organization name for the container registry'
    required: false
    default: 'xngen-ai'
  version_increment:
    description: 'Version increment type (patch/minor/major)'
    required: false
    default: 'patch'
  dockerfile_path:
    description: 'Path to the Dockerfile'
    required: false
    default: './Dockerfile'
  context_path:
    description: 'Build context path'
    required: false
    default: '.'
  build_args:
    description: 'Build arguments in the format KEY=VALUE,KEY2=VALUE2'
    required: false
  build_secrets:
    description: 'Build secrets in the format KEY=VALUE,KEY2=VALUE2'
    required: false
  railway_token:
    description: 'Railway deployment token'
    required: false
  railway_service_id:
    description: 'Railway service ID'
    required: false
  railway_environment_id:
    description: 'Railway environment ID'
    required: false
  deploy_env:
    description: 'Deployment environment (affects tags and versioning)'
    required: false
    default: 'dev'

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get next version
      uses: reecetech/version-increment@2024.4.3
      id: version
      with:
        # Always use the current branch as the release branch to get a normal version without -pre suffix
        release_branch: ${{ github.ref_name }}
        increment: ${{ inputs.version_increment }}

    - name: Get Git commit and build date
      id: git_info
      shell: bash
      run: |
        echo "GIT_COMMIT=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        echo "GIT_COMMIT_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

    - name: Define IMAGE_FULL_NAME and IMAGE_TAG
      id: image_info
      shell: bash
      run: |
        echo "IMAGE_FULL_NAME=${{ inputs.registry }}/${{ inputs.org_name }}/${{ inputs.image_name }}" >> $GITHUB_OUTPUT
        
        # Set the appropriate tag based on deploy_env
        if [[ "${{ inputs.deploy_env }}" == "prod" ]]; then
          # For production: v1.0.0
          echo "IMAGE_TAG=v${{ steps.version.outputs.version }}" >> $GITHUB_OUTPUT
          echo "IMAGE_LATEST=latest" >> $GITHUB_OUTPUT
        elif [[ "${{ inputs.deploy_env }}" == "staging" ]]; then
          # For staging: v1.0.0-pre.COMMIT_HASH
          echo "IMAGE_TAG=v${{ steps.version.outputs.version }}-pre.${{ steps.git_info.outputs.GIT_COMMIT_SHORT }}" >> $GITHUB_OUTPUT
          echo "IMAGE_LATEST=stag-latest" >> $GITHUB_OUTPUT
        elif [[ "${{ inputs.deploy_env }}" == "develop" ]]; then
          # For develop: v1.0.0-dev.COMMIT_HASH
          echo "IMAGE_TAG=v${{ steps.version.outputs.version }}-dev.${{ steps.git_info.outputs.GIT_COMMIT_SHORT }}" >> $GITHUB_OUTPUT
          echo "IMAGE_LATEST=dev-latest" >> $GITHUB_OUTPUT
        else
          # For feature branches or custom environments: v1.0.0-XXX.COMMIT_HASH (where XXX is first 3 chars of deploy_env)
          # Convert to lowercase and take first 3 characters
          ENV_TAG=$(echo "${{ inputs.deploy_env }}" | tr '[:upper:]' '[:lower:]' | cut -c1-3)
          echo "IMAGE_TAG=v${{ steps.version.outputs.version }}-${ENV_TAG}.${{ steps.git_info.outputs.GIT_COMMIT_SHORT }}" >> $GITHUB_OUTPUT
          echo "IMAGE_LATEST=${ENV_TAG}-latest" >> $GITHUB_OUTPUT
        fi

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ github.actor }}
        password: ${{ github.token }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata (tags, labels) for container build
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.image_info.outputs.IMAGE_FULL_NAME }}
        tags: |
          type=raw,value=${{ steps.image_info.outputs.IMAGE_TAG }}
          type=raw,value=${{ steps.image_info.outputs.IMAGE_LATEST }}
        labels: |
          org.opencontainers.image.title=${{ inputs.image_title }}
          org.opencontainers.image.description=${{ inputs.image_description }}
          org.opencontainers.image.url=https://github.com/${{ github.repository }}
          org.opencontainers.image.authors=XnGen AI
          org.opencontainers.image.version=${{ steps.image_info.outputs.IMAGE_TAG }}
          org.opencontainers.image.created=${{ steps.git_info.outputs.BUILD_DATE }}
          org.opencontainers.image.revision=${{ steps.git_info.outputs.GIT_COMMIT }}
          org.opencontainers.image.licenses=Proprietary

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ${{ inputs.context_path }}
        file: ${{ inputs.dockerfile_path }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: ${{ inputs.build_args }}
        secrets: ${{ inputs.build_secrets }}

    - name: Deploy to Railway
      if: inputs.railway_token != '' && inputs.railway_service_id != '' && inputs.railway_environment_id != ''
      uses: xngen-ai/railway-deploy-image@v1
      with:
        railway_token: ${{ inputs.railway_token }}
        image_url: "${{ steps.image_info.outputs.IMAGE_FULL_NAME }}:${{ steps.image_info.outputs.IMAGE_TAG }}"
        service_id: ${{ inputs.railway_service_id }}
        environment_id: ${{ inputs.railway_environment_id }}
